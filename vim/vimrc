if has("win32")||has("win64")
    let g:python3_host_prog=('python')
    let data_dir=$HOME.'/vimfiles'
else
    let g:python3_host_prog=('python3')
    let data_dir=$HOME.'/.vim'
    "let data_dir='~/.config/vim'
endif

if empty(glob(data_dir.'/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source %
endif

if executable('win32yank') "优先使用 win32yank
  let g:clipboard = {
        \   'name': 'win32yank',
        \   'copy': {
        \      '+': 'win32yank -i --crlf',
        \      '*': 'win32yank -i --crlf',
        \    },
        \   'paste': {
        \      '+': 'win32yank -o --lf',
        \      '*': 'win32yank -o --lf',
        \    },
        \   'cache_enabled': 1,
        \ }
else " Linux环境

  let s:wayland_active = !empty($WAYLAND_DISPLAY) || $XDG_SESSION_TYPE ==# 'wayland'
  let s:x11_active = !empty($DISPLAY) && $XDG_SESSION_TYPE !=# 'wayland'

  if s:wayland_active && executable('wl-copy') " Wayland 环境（即使同时安装了 X11 工具）
    let g:clipboard = {
          \   'name': 'wl-clipboard',
          \   'copy': {
          \      '+': 'wl-copy',
          \      '*': 'wl-copy',
          \    },
          \   'paste': {
          \      '+': 'wl-paste',
          \      '*': 'wl-paste',
          \    },
          \ }
  elseif s:x11_active && executable('xclip') "明确处于 X11 会话时使用 xclip
    let g:clipboard = {
          \   'name': 'xclip',
          \   'copy': {
          \      '+': 'xclip -selection clipboard',
          \      '*': 'xclip -selection primary',
          \    },
          \   'paste': {
          \      '+': 'xclip -selection clipboard -o',
          \      '*': 'xclip -selection primary -o',
          \    },
          \ }
  endif
endif

call plug#begin(data_dir.'/plug')
Plug 'neoclide/coc.nvim',{'branch':'release'} "代码补全

Plug 'lambdalisue/vim-fern'
Plug 'lambdalisue/vim-fern-renderer-nerdfont'
Plug 'lambdalisue/vim-fern-git-status'

Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'lambdalisue/nerdfont.vim'
Plug 'mengelbrecht/lightline-bufferline'

Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'kaicataldo/material.vim',{'branch':'main'}
"Plug 'voldikss/vim-translator'"翻译
Plug 'bujnlc8/vim-translator'

Plug 'voldikss/vim-floaterm' "终端
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } "模糊查找
Plug 'junegunn/fzf.vim'

Plug 'jiangmiao/auto-pairs' "补全括号
Plug '907th/vim-auto-save'
Plug 'Yggdroot/indentLine' "对其线
Plug 'preservim/nerdcommenter' "注释
"Plug 'rhysd/clever-f.vim'
"Plug 'mg979/vim-visual-multi', {'branch': 'master'} "多光标

Plug 'vim-autoformat/vim-autoformat'
Plug 'mhinz/vim-startify'

Plug 'airblade/vim-gitgutter' "git修改
"Plug 'tpope/vim-fugitive'

"Plug 'itchyny/vim-cursorword'
call plug#end()

"------------------------------------------------------------------------------
hi PMenu            guifg=NONE guibg=NONE
"hi PMenuSel           ctermfg=255    ctermbg=123
"hi CocMenuSel ctermbg=237 guibg=#13354A
"autocmd ColorScheme * hi CocMenuSel ctermbg=237 guibg=#13354A

set updatetime=250
set signcolumn=yes

set background=dark
set termguicolors
set t_Co=256
let mapleader=","
let g:maplocalleader=","
set hlsearch
set viminfo='1000,<666
set clipboard=unnamed
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gb18030,default
set ignorecase "搜索忽略大小写
" autocmd VimEnter * NoMatchParen "取消括号高亮匹配
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set belloff=all
set tm=500
set number
"set relativenumber
set autoindent
set ts=4
set shiftwidth=4
set softtabstop=4
set tabstop=4
set scrolloff=5
set pumheight=7 "菜单选项行数
set autoread
set cindent
set expandtab "设置tab=space
"set noexpandtab "设置spce=tab
set mouse+=a

set laststatus=2
set hidden
set noshowmode

set nocompatible "不兼容vi模式
set cmdheight=1
set hlsearch
set backspace=indent,eol,start "设置back键
set incsearch
set nobackup
set nowritebackup
set noswapfile
set noundofile
set signcolumn=yes
let &t_SI = "\e[6 q" "SI = INSERT mode
let &t_SR = "\e[4 q" "SR = REPLACE mode
let &t_EI = "\e[2 q" "EI = NORMAL mode (ELSE)
autocmd! BufNewFile,BufRead *.vs,*.fs,*.frag,*.vert set ft=glsl

"set t_8f=^[[38;2;%lu;%lu;%lum
"set t_8b=^[[48;2;%lu;%lu;%lum
"setlocal list
"set listchars=tab:>-,space:.
"-------------------------------------------------------------------------------------
"coc-nvim 补全
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#_select_confirm() :
    \ coc#expandableOrJumpable() ? 
    \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" : "\<TAB>"

inoremap <silent><expr> <C-j>
    \ coc#expandableOrJumpable() ? 
    \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" : "\<TAB>"

inoremap <expr><C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"

inoremap <silent><expr> <C-n>
    \ coc#pum#visible() ? coc#pum#next(1) : CheckBackspace() ? "\<Tab>" : coc#refresh()

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"inoremap <expr><C-u> coc#pum#visible() ? coc#pum#cancel() : CheckBackspace()
inoremap <expr><C-u> coc#pum#visible() ? coc#pum#close() : "\<C-u>"
inoremap <expr><C-k> coc#pum#visible() ? coc#pum#close() : "\<C-k>"


function! CheckBackspace() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction


"autocmd CursorHold * hi CocFloating  guibg=NONE guifg=NONE
"autocmd CursorHold * hi CocFloatBorder guibg=NONE guifg=#ff0000

" autocmd CursorHold * silent call CocActionAsync('highlight')
" augroup mygroup
"     autocmd!
"     autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"     autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

nnoremap <silent> gp <Plug>(coc-diagnostic-prev)
nnoremap <silent> gn <Plug>(coc-diagnostic-next)

nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gi <Plug>(coc-type-definition)
nnoremap <silent> go <Plug>(coc-implementation)

nnoremap <silent> gr <Plug>(coc-rename)
nnoremap <silent> gc <Plug>(coc-references)

        "\ 'coc-sumneko-lua',
        "\ 'coc-sh',
        "\ 'coc-go',
let g:coc_global_extensions = [
        \ 'coc-clangd',
        \ 'coc-rust-analyzer',
        \ 'coc-highlight',
        \ 'coc-vimlsp',
        \ 'coc-json',
        \ 'coc-cmake',
        \ 'coc-snippets',
        \]

nnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"inoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"inoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
noremap <silent> gl :CocOutline<CR>

"------------------------------------------------------------------------------------
let g:fern#renderer = "nerdfont"
let g:fern#disable_default_mappings = 1
let g:fern#disable_drawer_hover_popup = 1
noremap <silent><C-s> :Fern . -drawer -width=30 -toggle<CR>
function! s:init_fern() abort
  nmap <buffer> u <Plug>(fern-action-choice)
  nmap <buffer> , <Plug>(fern-action-repeat)
  nmap <buffer> . <Plug>(fern-action-hidden:toggle)
  nmap <buffer> z <Plug>(fern-action-hidden:toggle)
  nmap <buffer> a <Plug>(fern-action-new-file)
  nmap <buffer> A <Plug>(fern-action-new-dir)
  nmap <buffer> r <Plug>(fern-action-rename)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> h <Plug>(fern-action-collapse)
  nmap <buffer> y <Plug>(fern-action-clipboard-copy)
  nmap <buffer> p <Plug>(fern-action-clipboard-paste)

  nmap <silent><buffer> q :<C-u>quit<CR>

  nmap <buffer><expr>
      \ <Plug>(fern-my-expand-or-collapse-or-open)
      \ fern#smart#leaf(
      \   "\<Plug>(fern-action-open:select)",
      \   "\<Plug>(fern-action-expand)",
      \   "\<Plug>(fern-action-collapse)",
      \ )
  nmap <buffer><nowait> l <Plug>(fern-my-expand-or-collapse-or-open)
  nmap <buffer><nowait> <cr> <Plug>(fern-my-expand-or-collapse-or-open)

endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
  autocmd FileType fern setlocal nonumber norelativenumber signcolumn=no
augroup END
"-----------------------------------------------------------------------------------
"主题 material
if has("gui_running")
    set guioptions=
    if has("win32")||has("win64")
        set guifont=SauceCodePro_NFM:h16
        set rop=type:directx
    else
        set guifont=SauceCodePro\ NFM\ 16
    endif
    " hi Normal guifg=NONE guibg=#fff0f5
endif
"let g:material_terminal_italics = 1
"let g:material_theme_style = 'palenight-community'
"colorscheme  material

"let g:lightline = {'colorscheme': 'catppuccin_latte'}
colorscheme  catppuccin_frappe

"------------------------------------------------------------------------------------
"状态栏

let g:lightline#bufferline#enable_nerdfont=1
let g:lightline#bufferline#modified=' '
"let g:lightline#bufferline#read_only=' '

let g:lightline = {
        \ 'colorscheme': 'PaperColor',
        \ 'active': {
        \ 'left': [ [ 'mode', 'paste' ],
        \ [ 'gitbranch', 'readonly', 'filename', 'modified','method' ] ]
        \ },
        \ 'component_function': {
        \ 'gitbranch': 'gitbranch#name',
        \ 'method': 'NearestMethodOrFunction'
        \ },
        \ 'tabline': {
        \   'left': [ ['buffers'] ],
        \   'right': [ ['close'] ]
        \ },
        \ 'component_expand': {
        \   'buffers': 'lightline#bufferline#buffers'
        \ },
        \ 'component_type': {
        \   'buffers': 'tabsel'
        \ },
        \ }

let g:lightline.separator = { 'left': '', 'right': '' }
let g:lightline.subseparator = { 'left': '', 'right': '' }
set showtabline=2
autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

"------------------------------------------------------------------------------------
"fzf
let g:fzf_layout = { 'window': { 'width': 0.98, 'height': 0.9, 'relative': v:true, 'border':'sharp'} }
nnoremap <silent><C-m>f :Files<CR>
nnoremap <silent><C-m>g :Rg<CR>
nnoremap <silent><C-m>b :Buffers<CR>
nnoremap <silent><C-m>l :BLines<CR>
nnoremap <silent><C-m>a :Ag<CR>
"------------------------------------------------------------------------------------
"vim-floaterm终端
if has("win32")||has("win64")
    let g:floaterm_shell='nu.exe'
endif

let g:floaterm_borderchars = '─│─│╭╮╯╰ '
let g:floaterm_title = ''
let g:floaterm_width = 0.8
let g:floaterm_height = 0.9

tnoremap <silent><C-\> <C-\><C-n>:FloatermKill<CR>
nnoremap <silent><C-\> :FloatermNew --height=0.9 --width=0.8 --name=xiaobin<CR>
"-----------------------------------------------------------------------------------
"indentLine
"let g:indentLine_color_term = 111
let g:indentLine_char = '│'
let g:indentLine_enabled=1
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" Vim
let g:indentLine_color_term = 237

"set listchars=tab:~~,"space:.
"set list
"------------------------------------------------------------------------------------

"vim-visual-multi
"------------------------------------------------------------------------------------
"nerdcommenter
nnoremap <silent> <leader>c V}:call nerdcommenter#Comment('x', 'toggle')<CR>
nnoremap <silent> <leader>c V{:call nerdcommenter#Comment('x', 'toggle')<CR>

let g:auto_save = 1
"------------------------------------------------------------------------------------

"auto-pairs 括号补全
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}
"let g:AutoPairsShortcutFastWrap = '<C-e>'
"------------------------------------------------------------------------------------

"git setting
let g:gitgutter_enabled = 0
let g:gitgutter_signs = 1
let g:gitgutter_max_signs = 500
let g:gitgutter_max_signs = -1
highlight GitgutterAdd guifg=#009a00 ctermfg=10
highlight GitgutterChange guifg=#ffbb00 ctermfg=9
highlight GitgutterDelete guifg=#ff2222 ctermfg=9
let g:gitgutter_sign_added='|'
let g:gitgutter_sign_modified='|'
let g:gitgutter_sign_removed='|'
let g:gitgutter_sign_removed_first_line='|'
let g:gitgutter_sign_removed_above_and_below='|'
let g:gitgutter_sign_modified_removed='|'
nnoremap <silent>gj <Plug>(GitGutterNextHunk)
nnoremap <silent>gk <Plug>(GitGutterPrevHunk)
nnoremap <silent>td :Gvdiffsplit<CR>
nnoremap <silent>tb :Git blame<CR>
nnoremap <silent>gt :GitGutterToggle<cr>

"--------------------------------------------------------------------------------
"formatconfig
let g:formatdef_stylua = '"stylua --indent-type=Spaces --indent-width=4 --column-width=150 --search-parent-directories"'
let g:formatters_lua = ['stylua']

let g:formatdef_rustfmt = '"rustfmt"'
let g:formatters_rust = ['rustfmt']

let g:formatdef_clangformat = '"clang-format \"--style={BasedOnStyle: LLVM, IndentWidth:    4, SortIncludes:  false, SpacesInParentheses : false, ReflowComments: false, SpacesInConditionalStatement:   false, SpaceBeforeRangeBasedForLoopColon: false, SpaceBeforeParens:  Never, AllowShortLambdasOnASingleLine: All, ColumnLimit: 130,}\""'
let g:formatdef_clangformat = '"clang-format \"--style={BasedOnStyle: LLVM, IndentWidth:    4, SortIncludes:  false, SpacesInParentheses : false, ReflowComments: false, SpacesInConditionalStatement:   false, SpaceBeforeRangeBasedForLoopColon: false, SpaceBeforeParens:  Never, AllowShortLambdasOnASingleLine: All, ColumnLimit: 130,}\""'
let g:formatters_cpp = ['clangformat']
let g:formatters_c = ['clangformat']

let g:formatdef_fixjson = '"fixjson"'
let g:formatters_json = ['fixjson']
"-------------------------------------------------------------------------------
"let g:translator_window_borderchars = ['─','│','─','│','╭','╮','╯','╰ ']
"let g:translator_window_type = 'popup'
"let g:translator_window_max_width=0.8
"let g:translator_window_max_height=0.6
"let g:translator_proxy_url = 'http://127.0.0.1:10809'
"nmap <silent> <Leader>t <Plug>TranslateW
"vmap <silent> <Leader>t <Plug>TranslateWV
"hi  Translator        guifg=#676E95 guibg=NONE gui=NONE         
"hi  TranslatorBorder  guifg=#686eaa guibg=NONE gui=NONE

let g:translator_channel='tencent'
vnoremap <leader>t :<C-u>Tv<CR>
"-----------------------------------------------------------------------------------------------

inoremap <silent><C-l> <Right>
nnoremap <silent><C-n> :bn<CR>
nnoremap <silent><C-p> :bp<CR>
nnoremap <silent><C-k> :bd<CR>
nnoremap s F

nnoremap w e
nnoremap e ge

"nnoremap <leader>a :%s/<C-r><C-w>//g<left><left>

nnoremap <silent>q :nohl<CR>

"nnoremap <silent><C-y> "+yy
"nnoremap <silent><C-e> "+p
"vnoremap <silent><C-y> "+y
"nnoremap <C-j> <C-w>w<CR>

"nnoremap zl 5<C-w><<CR>
"nnoremap zh 5<C-w>><CR>
"nnoremap <C-w>c :if winnr('$') == 1 \| tabclose \| else \| close \| endif<CR>


set numberwidth=1
set guicursor+=a:blinkon0
"hi Normal guibg=NONE guifg=NONE ctermfg=NONE ctermbg=NONE "设置透明

hi SignColumn  ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
hi VertSplit   ctermbg=NONE ctermfg=0 guibg=NONE guifg=#000000
set fillchars+=vert:│

autocmd BufWinEnter * setlocal formatoptions-=cro
autocmd FileType json,markdown let g:indentLine_conceallevel = 0
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif


"hi Normal guifg=NONE guibg=#24283b
"hi SignColumn   guibg=#24283b  guifg=NONE
"hi NonText guibg=#24283b guifg=NONE
"highlight EndOfBuffer guibg=#24283b guifg=NONE
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set cursorline

"hi CursorLine   guifg=NONE  guibg=#303347 gui=NONE cterm=NONE
hi FloatermBorder guibg=NONE guifg=#686eaa gui=NONE
hi LineNr       guibg=NONE  guifg=#494d64 "设置行号颜色
hi CursorLineNr guifg=#b7bdf8  guibg=NONE

"hi CocVirtualText        guifg=#676e95 guibg=NONE gui=NONE "不知道干嘛的
autocmd CursorHold *  hi CocHoverRange guibg=NONE gui=NONE "按下大K的时候 有一点点问题"
hi CocPumShortcut        guifg=#686e95 guibg=NONE gui=NONE "lsp snipp来源
hi CocPumSearch          guifg=#4683C1 guibg=NONE gui=NONE " 补全匹配字符
hi CocInlayHint          guifg=#1a1c26 guibg=NONE gui=NONE "hint 提示

hi CocErrorHighlight   guifg=#D55F6F guibg=NONE gui=NONE cterm=NONE "lsp错误
hi CocWarningHighlight guifg=#ea9a71 guibg=NONE gui=NONE cterm=NONE
hi CocInfoHighlight    guifg=#87beaa guibg=NONE gui=NONE cterm=NONE
hi CocHintHighlight    guifg=#CA9EE6 guibg=NONE gui=NONE cterm=NONE

hi CocErrorSign        guifg=#D55F6F guibg=NONE gui=NONE cterm=NONE "lsp错误
hi CocWarningSign      guifg=#ea9a71 guibg=NONE gui=NONE cterm=NONE
hi CocInfoSign         guifg=#87beaa guibg=NONE gui=NONE cterm=NONE
hi CocHintSign         guibg=#CA9EE6 guibg=NONE gui=NONE cterm=NONE

hi suFloat guibg=NONE guifg=#ff9999 gui=NONE "补全框颜色
hi snFloat guibg=NONE guifg=#686eaa gui=NONE
hi mmFloat guibg=NONE guifg=#686eaa gui=NONE
hi nnFloat guibg=NONE guifg=#949CBB gui=NONE


hi Statement     guifg=#317272 guibg=NONE gui=NONE "if  while public语句
hi cStatement    guifg=#317272 guibg=NONE gui=NONE
hi cConditional  guifg=#317272 guibg=NONE gui=NONE
hi cRepeat       guifg=#317272 guibg=NONE gui=NONE
hi cStorageClass guifg=#317272 guibg=NONE gui=NONE
hi cppExceptions guifg=#317272 guibg=NONE gui=NONE
hi Structure     guifg=#317272 guibg=NONE gui=NONE
hi Keyword       guifg=#317272 guibg=NONE gui=NONE "class struct template 
hi StorageClass  guifg=#317272 guibg=NONE gui=NONE
hi Operator      guifg=#317272 guibg=NONE gui=NONE
hi cLabel        guifg=#317272 guibg=NONE gui=NONE
hi Statement     guifg=#317272 guibg=NONE gui=NONE
hi Boolean       guifg=#317272 guibg=NONE gui=NONE

"  #A885af #9c6383 #b87898 #ac797b #9f6686 #cba6a0 #E5C890 #CA9EE6 #8CAAEE #E5C07B    
"  #EA999C #f5a3a3 #bf7e80 #ba797b #B03060 #ae5c5e #ce8452 #7c73b0 #F7768E #a84f29    
"  #AF875F #AF87AF #D75F87 #bf7e80 #d55f6f #ea9a71 #ff9999 #d5855a #B766AD #c170b7
"  #ef9f76 #E78284 #F7768E #E78284 #da8a67 #87beaa #EF9F76 #a38862 #d99a18 #CA9EE6 #ffff00

hi CocSemTypeNamespace guifg=#B766AD guibg=NONE gui=NONE "命名空间
hi CocSemTypeClass     guifg=#Ca7a5a guibg=NONE gui=NONE "类类型
hi Type                guifg=#D55F6F guibg=NONE gui=NONE " 类型

hi Identifier          guifg=#9F6680 guibg=NONE gui=NONE
hi CocSemVariable      guifg=#9F6680 guibg=NONE gui=NONE "变量
hi CocSemTypeParameter guifg=#749395 guibg=NONE gui=NONE "函数形参"
hi CocSemTypeProperty  guifg=#7C73B0 guibg=NONE gui=NONE "类成员变量

hi Function                           guifg=#4683C1 guibg=NONE gui=NONE "函数
hi CocSemTypeModUnknownDependentName  guifg=#4683C1 guibg=NONE gui=NONE "函数

hi Constant guifg=#E5C890 guibg=NONE gui=NONE "枚举
hi Number   guifg=#7C73B0 guibg=NONE gui=NONE "常量

hi Character guifg=#676E95 guibg=NONE gui=NONE "字符串
hi String    guifg=#676E95 guibg=NONE gui=NONE "字符
hi Comment   guifg=#676E95 guibg=NONE gui=NONE "注释
hi Special   guifg=#676E95 guibg=NONE gui=NONE "注释

hi Macro   guifg=#D55F6F guibg=NONE gui=NONE
hi PreProc guifg=#D55F6F guibg=NONE gui=NONE "预处理
hi Include guifg=#D55F6F guibg=NONE gui=NONE "include

hi Define  guifg=#B03060 cterm=NONE gui=NONE "宏预定义符号
hi Visual  guibg=#585D73 guifg=NONE gui=NONE cterm=NONE
hi Search  guifg=#414559 guifg=NONE gui=NONE cterm=NONE

hi vimVar       guifg=#9F6680 guibg=NONE gui=NONE "变量
hi vimFunction  guifg=#4683C1 guibg=NONE gui=NONE "函数

command! -nargs=? -complete=buffer -bang BufOnly {
    g:BufOnly('<args>', '<bang>') 
}

def g:BufOnly(b: string, bang: string): void
    var buffer: number
    if b == ''
        buffer = bufnr('%')
    elseif str2nr(b) > 0
        buffer = bufnr(str2nr(b))
    else
        buffer = bufnr(b)
    endif
    if buffer == -1
        echohl ErrorMsg
        echomsg 'No matching buffer for ' .. b
        echohl None
        return
    endif

    var last_buffer: number = bufnr('$')
    var delete_count = 0
    for n in range(1, last_buffer)
        if n != buffer && buflisted(n)
            if bang == '' && getbufvar(n, '&modified')
                echohl ErrorMsg
                echomsg 'No write since last change for buffer ' ..
                    n .. ' (add ! to override)'
                echohl None
            else
                silent exe 'bdel' .. bang .. ' ' .. n
                if ! buflisted(n)
                    ++delete_count
                endif
            endif
        endif
    endfor
    if delete_count == 1
        echomsg delete_count .. " buffer deleted"
    elseif delete_count > 1
        echomsg delete_count .. " buffers deleted"
    endif
    lightline#bufferline#reload()
enddef
nnoremap <silent><C-q> :BufOnly<cr>
